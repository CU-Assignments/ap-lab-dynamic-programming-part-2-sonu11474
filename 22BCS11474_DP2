//Unique Paths
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];

    
        for (int i = 0; i < m; i++) dp[i][0] = 1;
        for (int j = 0; j < n; j++) dp[0][j] = 1;

       
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }

        return dp[m-1][n-1];
    }
}

// Coin Change	
class Solution {
    public int coinChange(int[] coins, int amount) {

   

      int [] dp = new int[amount+1];

      Arrays.fill(dp, amount+1);

      dp[0] = 0;

      for(int i = 1; i<=amount; i++)
      {
        for(int coin: coins)
        {
            if(i - coin >= 0)
            {
            dp[i] = Math.min(dp[i], dp[i - coin]+1);
            }
        }
      }

      if(dp[amount]<=amount)
      {
        return dp[amount];
      }
      return -1;
        
    }


    
}
// . Decode Ways
public class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) != '0' ? 1 : 0;
        
        for (int i = 2; i <= n; i++) {
            if (s.charAt(i - 1) != '0') {
                dp[i] += dp[i - 1];
            }
            
            int twoDigit = Integer.parseInt(s.substring(i - 2, i));
            if (twoDigit >= 10 && twoDigit <= 26) {
                dp[i] += dp[i - 2];
            }
        }
        
        return dp[n];
    }
}

// Word Break
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
       
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;

     
        for (int i = 1; i <= n; i++) {
         
            for (int j = 0; j < i; j++) {
            
                if (dp[j] && wordDict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[n]; // dp[n] will be true if the whole string can be segmented

    }
}

// Word Break II
class Solution {
    List<String> wordBreak(String s, List<String> words) {
        List<String> res = new ArrayList<>();
        build(s, words.stream().mapToInt(String::length).max().getAsInt(), "", words, res);
        return res;
    }

    void build(String s, int max_len, String cur, List<String> words, List<String> res) {
        if (s.isEmpty()) { res.add(cur); return; }

        for (int i = 0; i <= Math.min(max_len, s.length()); i++) {
            var word = s.substring(0, i);
            if (words.contains(word)) build(s.substring(i), max_len, cur.isEmpty() ? cur + word : cur + " " + word, words, res);
        }
    }
}
